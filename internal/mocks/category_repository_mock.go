// Code generated by mockery v2.42.1. DO NOT EDIT.

package repomocks

import (
	domain "github.com/rulanugrh/lysithea/internal/entity/domain"
	mock "github.com/stretchr/testify/mock"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *CategoryRepository) Create(req domain.Category) (*domain.Category, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Category) (*domain.Category, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.Category) *domain.Category); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Category) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

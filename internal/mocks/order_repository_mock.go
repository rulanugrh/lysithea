// Code generated by mockery v2.42.1. DO NOT EDIT.

package repomocks

import (
	domain "github.com/rulanugrh/lysithea/internal/entity/domain"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// AddToCart provides a mock function with given fields: req
func (_m *OrderRepository) AddToCart(req domain.Cart) (*domain.Cart, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddToCart")
	}

	var r0 *domain.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Cart) (*domain.Cart, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.Cart) *domain.Cart); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Cart) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Buy provides a mock function with given fields: req
func (_m *OrderRepository) Buy(req domain.Order) (*domain.Order, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Buy")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Order) (*domain.Order, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.Order) *domain.Order); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Order) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cart provides a mock function with given fields: userID, page, perPage
func (_m *OrderRepository) Cart(userID uint, page int, perPage int) (*[]domain.Cart, error) {
	ret := _m.Called(userID, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for Cart")
	}

	var r0 *[]domain.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) (*[]domain.Cart, error)); ok {
		return rf(userID, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) *[]domain.Cart); ok {
		r0 = rf(userID, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(userID, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Checkout provides a mock function with given fields: id
func (_m *OrderRepository) Checkout(id uint) (*domain.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountCartByUserID provides a mock function with given fields: userID
func (_m *OrderRepository) CountCartByUserID(userID uint) (int64, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CountCartByUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) int64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountOrderByUserID provides a mock function with given fields: userID
func (_m *OrderRepository) CountOrderByUserID(userID uint) (int64, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CountOrderByUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) int64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindID provides a mock function with given fields: uuid
func (_m *OrderRepository) FindID(uuid string) (*domain.Order, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for FindID")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Order, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Order); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// History provides a mock function with given fields: userID, page, perPage
func (_m *OrderRepository) History(userID uint, page int, perPage int) (*[]domain.Order, error) {
	ret := _m.Called(userID, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for History")
	}

	var r0 *[]domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) (*[]domain.Order, error)); ok {
		return rf(userID, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) *[]domain.Order); ok {
		r0 = rf(userID, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(userID, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pay provides a mock function with given fields: uuid, userID
func (_m *OrderRepository) Pay(uuid string, userID uint) (*domain.Order, error) {
	ret := _m.Called(uuid, userID)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (*domain.Order, error)); ok {
		return rf(uuid, userID)
	}
	if rf, ok := ret.Get(0).(func(string, uint) *domain.Order); ok {
		r0 = rf(uuid, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(uuid, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: uuid, status, model
func (_m *OrderRepository) Update(uuid string, status string, model domain.Order) error {
	ret := _m.Called(uuid, status, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, domain.Order) error); ok {
		r0 = rf(uuid, status, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
